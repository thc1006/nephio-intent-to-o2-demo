name: Nightly CI/CD - Health Check & Maintenance

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_full_check:
        description: 'Force full health check including integration tests'
        required: false
        default: 'false'
        type: boolean

env:
  KUBE_VERSION: v1.28.0
  KPT_VERSION: v1.0.0-beta.49
  PYTHON_VERSION: 3.9

jobs:
  # Nightly health check
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    outputs:
      health-status: ${{ steps.health.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install yamllint jsonschema kubernetes pyyaml

          # Install kubeconform
          wget -O kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform.tar.gz
          sudo mv kubeconform /usr/local/bin/

      - name: Run configuration validation
        run: |
          echo "::group::Nightly Configuration Validation"
          ./scripts/ci/validate-yaml.sh
          ./scripts/ci/validate-k8s-manifests.sh
          ./scripts/ci/validate-policies.sh
          echo "::endgroup::"

      - name: Check repository health
        id: health
        run: |
          echo "::group::Repository Health Check"

          # Check for broken links in documentation
          if command -v markdown-link-check &> /dev/null; then
            find . -name "*.md" -exec markdown-link-check {} \; || true
          fi

          # Check for outdated dependencies
          if [ -f "requirements.txt" ]; then
            pip list --outdated || true
          fi

          # Check Git repository integrity
          git fsck --no-reflogs || echo "Git fsck found issues"

          # Check disk space usage
          df -h .

          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Generate health report
        run: |
          echo "::group::Generating Health Report"
          mkdir -p artifacts

          cat > artifacts/nightly-health-report.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "commit": "$(git rev-parse HEAD)",
            "branch": "$(git rev-parse --abbrev-ref HEAD)",
            "checks": {
              "yaml_validation": "$([ -f artifacts/yaml-validation-report.json ] && echo 'completed' || echo 'failed')",
              "k8s_validation": "$([ -f artifacts/k8s-validation-report.json ] && echo 'completed' || echo 'failed')",
              "policy_validation": "$([ -f artifacts/policy-validation-report.json ] && echo 'completed' || echo 'failed')",
              "git_integrity": "healthy",
              "disk_space": "$(df -h . | tail -1 | awk '{print $5}')"
            },
            "recommendations": []
          }
          EOF

          echo "::endgroup::"

      - name: Upload health artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nightly-health-artifacts
          path: artifacts/

  # Comprehensive validation (if requested or issues found)
  comprehensive-check:
    name: Comprehensive Validation
    runs-on: ubuntu-latest
    needs: health-check
    if: github.event.inputs.force_full_check == 'true' || needs.health-check.outputs.health-status != 'healthy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          kubernetes_version: ${{ env.KUBE_VERSION }}
          cluster_name: nightly-test-cluster

      - name: Run integration tests
        run: |
          echo "::group::Nightly Integration Tests"

          # Install Config Sync operator
          kubectl apply -f https://github.com/GoogleContainerTools/kpt-config-sync/releases/latest/download/config-sync-operator.yaml
          kubectl wait --for=condition=available --timeout=300s deployment/config-sync-operator -n config-management-system

          # Run integration tests
          ./scripts/ci/run-integration-tests.sh
          echo "::endgroup::"

      - name: Run smoke tests
        run: |
          echo "::group::Nightly Smoke Tests"
          ./scripts/ci/run-smoke-tests.sh
          echo "::endgroup::"

      - name: Upload comprehensive test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-artifacts
          path: artifacts/

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Security policy check
        run: |
          echo "::group::Security Policy Check"

          # Check for hardcoded secrets
          git log --all --grep="password\|secret\|key\|token" --oneline || echo "No suspicious commits found"

          # Check file permissions
          find . -type f -perm /o+w -not -path "./.git/*" | head -10 || echo "No world-writable files found"

          # Check for suspicious files
          find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -not -path "./.git/*" | head -5 || echo "No suspicious certificate files found"

          echo "::endgroup::"

  # Dependency updates check
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check for outdated dependencies
        run: |
          echo "::group::Dependency Update Check"

          if [ -f "requirements.txt" ]; then
            echo "Checking Python dependencies..."
            pip install -r requirements.txt
            pip list --outdated --format=json > outdated-python-deps.json || echo "[]" > outdated-python-deps.json

            # Create update recommendations
            python3 << 'EOF'
          import json

          try:
              with open('outdated-python-deps.json', 'r') as f:
                  outdated = json.load(f)

              if outdated:
                  print("📦 Outdated Python packages found:")
                  for pkg in outdated:
                      print(f"  - {pkg['name']}: {pkg['version']} -> {pkg['latest_version']}")
              else:
                  print("✅ All Python packages are up to date")
          except:
              print("ℹ️  Could not check Python package versions")
          EOF
          fi

          # Check for GitHub Actions updates
          echo "Checking GitHub Actions versions..."
          grep -r "uses:" .github/workflows/ | grep -v "# renovate: disabled" || echo "No GitHub Actions found"

          echo "::endgroup::"

      - name: Create dependency update issue
        if: hashFiles('outdated-python-deps.json') != ''
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            let outdatedDeps = [];
            try {
              const content = fs.readFileSync('outdated-python-deps.json', 'utf8');
              outdatedDeps = JSON.parse(content);
            } catch (e) {
              console.log('No outdated dependencies file found');
              return;
            }

            if (outdatedDeps.length === 0) {
              console.log('No outdated dependencies found');
              return;
            }

            const title = `🔄 Nightly: Dependency Updates Available (${new Date().toISOString().split('T')[0]})`;
            let body = '## Outdated Dependencies\n\n';
            body += 'The following dependencies have updates available:\n\n';

            for (const dep of outdatedDeps) {
              body += `- **${dep.name}**: \`${dep.version}\` → \`${dep.latest_version}\`\n`;
            }

            body += '\n## Recommendations\n\n';
            body += '1. Review the changelogs for breaking changes\n';
            body += '2. Update dependencies in batches\n';
            body += '3. Run full test suite after updates\n';
            body += '4. Consider updating CI/CD pipeline dependencies as well\n';

            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependencies,nightly'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Dependency Updates Available')
            );

            if (existingIssue) {
              console.log('Updating existing dependency issue');
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
            } else {
              console.log('Creating new dependency update issue');
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependencies', 'nightly', 'maintenance']
              });
            }

  # Cleanup old artifacts
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cleanup old reports
        run: |
          echo "::group::Cleanup Old Reports"

          # Remove reports older than 30 days
          find artifacts/ -name "*-report.json" -mtime +30 -delete 2>/dev/null || true
          find reports/ -type f -mtime +30 -delete 2>/dev/null || true

          # Clean up old test artifacts
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

          echo "✅ Cleanup completed"
          echo "::endgroup::"

  # Send notification on failure
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [health-check, security-scan, dependency-check]
    if: failure()
    steps:
      - name: Create failure issue
        uses: actions/github-script@v6
        with:
          script: |
            const title = `🚨 Nightly CI/CD Failure - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Nightly CI/CD Pipeline Failure

            The nightly CI/CD pipeline has failed. Please investigate the following:

            ### Failed Jobs
            - Health Check: ${{ needs.health-check.result }}
            - Security Scan: ${{ needs.security-scan.result }}
            - Dependency Check: ${{ needs.dependency-check.result }}

            ### Commit Information
            - Branch: ${context.ref}
            - Commit: ${context.sha}
            - Workflow: ${context.workflow}

            ### Next Steps
            1. Review the failed job logs
            2. Fix any identified issues
            3. Verify fixes with manual testing
            4. Monitor subsequent nightly runs

            This issue was automatically created by the nightly CI/CD pipeline.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'nightly', 'ci-failure', 'priority-high']
            });

  # Generate nightly summary
  nightly-summary:
    name: Generate Nightly Summary
    runs-on: ubuntu-latest
    needs: [health-check, security-scan, dependency-check, cleanup]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate summary
        run: |
          echo "::group::Nightly Summary"

          mkdir -p artifacts

          cat > artifacts/nightly-summary.md << 'EOF'
          # Nightly CI/CD Summary

          **Date:** $(date -Iseconds)
          **Commit:** $(git rev-parse HEAD)
          **Branch:** $(git rev-parse --abbrev-ref HEAD)

          ## Job Results
          - Health Check: ${{ needs.health-check.result }}
          - Security Scan: ${{ needs.security-scan.result }}
          - Dependency Check: ${{ needs.dependency-check.result }}
          - Cleanup: ${{ needs.cleanup.result }}

          ## Summary
          The nightly CI/CD pipeline has completed. Review individual job results for details.
          EOF

          echo "::endgroup::"

      - name: Upload summary
        uses: actions/upload-artifact@v3
        with:
          name: nightly-summary
          path: artifacts/nightly-summary.md