name: CI/CD Pipeline - Configuration Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'gitops/**'
      - 'k8s/**'
      - 'packages/**'
      - 'tools/**'
      - 'scripts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'gitops/**'
      - 'k8s/**'
      - 'packages/**'
      - 'tools/**'
      - 'scripts/**'

env:
  KUBE_VERSION: v1.28.0
  KPT_VERSION: v1.0.0-beta.49
  PYTHON_VERSION: 3.9

jobs:
  # Phase 1: Static Analysis & Validation
  validation:
    name: Configuration Validation
    runs-on: ubuntu-latest
    outputs:
      validation-result: ${{ steps.validate.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install validation tools
        run: |
          # Install Python dependencies
          pip install yamllint jsonschema kubernetes pyyaml

          # Install kubeconform for K8s validation
          wget -O kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform.tar.gz
          sudo mv kubeconform /usr/local/bin/

          # Install kpt
          curl -L https://github.com/GoogleContainerTools/kpt/releases/download/${{ env.KPT_VERSION }}/kpt_linux_amd64 -o kpt
          chmod +x kpt
          sudo mv kpt /usr/local/bin/

      - name: YAML Syntax Validation
        id: yaml-validation
        run: |
          echo "::group::YAML Lint Check"
          ./scripts/ci/validate-yaml.sh
          echo "::endgroup::"

      - name: Kubernetes Manifest Validation
        id: k8s-validation
        run: |
          echo "::group::Kubernetes Manifest Validation"
          ./scripts/ci/validate-k8s-manifests.sh
          echo "::endgroup::"

      - name: KPT Package Validation
        id: kpt-validation
        run: |
          echo "::group::KPT Package Validation"
          ./scripts/ci/validate-kpt-packages.sh
          echo "::endgroup::"

      - name: Policy Validation
        id: policy-validation
        run: |
          echo "::group::Policy Validation"
          ./scripts/ci/validate-policies.sh
          echo "::endgroup::"

      - name: Set validation result
        id: validate
        run: |
          echo "result=success" >> $GITHUB_OUTPUT

  # Phase 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run unit tests
        run: |
          echo "::group::Running Unit Tests"
          ./scripts/ci/run-unit-tests.sh
          echo "::endgroup::"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Phase 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [validation, unit-tests]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          kubernetes_version: ${{ env.KUBE_VERSION }}
          cluster_name: test-cluster

      - name: Install test dependencies
        run: |
          # Install Config Sync operator for testing
          kubectl apply -f https://github.com/GoogleContainerTools/kpt-config-sync/releases/latest/download/config-sync-operator.yaml

          # Wait for operator to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/config-sync-operator -n config-management-system

      - name: Run integration tests
        run: |
          echo "::group::Running Integration Tests"
          ./scripts/ci/run-integration-tests.sh
          echo "::endgroup::"

      - name: Collect test artifacts
        if: always()
        run: |
          mkdir -p test-artifacts
          kubectl get all -A > test-artifacts/cluster-state.yaml
          kubectl describe nodes > test-artifacts/node-info.txt

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-artifacts
          path: test-artifacts/

  # Phase 4: Smoke Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          # Setup minimal test environment
          ./scripts/ci/setup-smoke-test-env.sh

      - name: Run smoke tests
        run: |
          echo "::group::Running Smoke Tests"
          ./scripts/ci/run-smoke-tests.sh
          echo "::endgroup::"

  # Phase 5: GitOps Integration (only on main branch)
  gitops-deploy:
    name: GitOps Deploy
    runs-on: ubuntu-latest
    needs: [validation, unit-tests, integration-tests, smoke-tests]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITOPS_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "CI/CD Pipeline"
          git config --global user.email "cicd@nephio-intent-demo.local"

      - name: Deploy to GitOps repositories
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
        run: |
          echo "::group::GitOps Deployment"
          ./scripts/ci/deploy-to-gitops.sh
          echo "::endgroup::"

      - name: Verify deployment
        run: |
          echo "::group::Deployment Verification"
          ./scripts/ci/verify-gitops-deployment.sh
          echo "::endgroup::"

  # Phase 6: Post-deployment checks and rollback preparation
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: gitops-deploy
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run post-deployment checks
        env:
          TARGET_SITE: ${{ matrix.site }}
        strategy:
          matrix:
            site: [edge1, edge2]
        run: |
          echo "::group::Post-deployment checks for ${{ matrix.site }}"
          ./scripts/postcheck.sh
          echo "::endgroup::"

      - name: Generate deployment report
        run: |
          echo "::group::Generating Deployment Report"
          ./scripts/ci/generate-deployment-report.sh
          echo "::endgroup::"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-artifacts
          path: |
            artifacts/
            reports/

  # Rollback job (triggered on failure)
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [gitops-deploy, post-deployment]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Execute rollback
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
        run: |
          echo "::group::Executing Rollback"
          ./scripts/rollback.sh
          echo "::endgroup::"

      - name: Notify rollback completion
        run: |
          echo "::notice::Rollback completed successfully"