name: Nightly Regression - Intent to O2IMS Pipeline

on:
  schedule:
    # Run daily at 2 AM UTC (adjust for your timezone)
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger
    inputs:
      target_sites:
        description: 'Target sites to test'
        required: false
        default: 'edge1,edge2,both'
        type: choice
        options:
          - 'edge1,edge2,both'
          - 'edge1'
          - 'edge2'
          - 'both'
      service_types:
        description: 'Service types to test'
        required: false
        default: 'enhanced-mobile-broadband,ultra-reliable-low-latency,massive-machine-type'
        type: string

env:
  MOCK_ADAPTER_ENDPOINT: 'http://localhost:8888'
  REPORTS_DIR: 'reports'
  ARTIFACTS_DIR: 'artifacts'

jobs:
  kpi-collection:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for metrics

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install requests pandas matplotlib seaborn jsonschema pyyaml jinja2

          # Install tools for KPI generation
          sudo apt-get update
          sudo apt-get install -y jq bc imagemagick

      - name: Start mock LLM adapter
        run: |
          echo "Starting mock LLM adapter..."
          cat > /tmp/mock_llm_adapter.py << 'EOF'
          from http.server import HTTPServer, BaseHTTPRequestHandler
          import json
          import time

          class MockAdapter(BaseHTTPRequestHandler):
              def do_POST(self):
                  if self.path == '/api/intent-to-28312':
                      content_length = int(self.headers['Content-Length'])
                      post_data = self.rfile.read(content_length)

                      # Mock response with KPI metrics
                      response = {
                          "status": "success",
                          "expectation": {
                              "id": f"exp-{int(time.time())}",
                              "type": "NetworkSliceExpectation",
                              "metrics": {
                                  "processing_time_ms": 150,
                                  "validation_score": 0.98
                              }
                          },
                          "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ")
                      }

                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps(response).encode())
                  else:
                      self.send_response(404)
                      self.end_headers()

              def log_message(self, format, *args):
                  pass  # Suppress logs

          if __name__ == "__main__":
              server = HTTPServer(('localhost', 8888), MockAdapter)
              print("Mock LLM adapter running on port 8888")
              server.serve_forever()
          EOF

          python3 /tmp/mock_llm_adapter.py &
          MOCK_PID=$!
          echo "MOCK_PID=$MOCK_PID" >> $GITHUB_ENV
          sleep 2

      - name: Run demo with mock adapter
        id: demo_run
        run: |
          echo "Running demo pipeline with target: ${{ inputs.target_site || 'both' }}"

          # Create timestamps
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Initialize KPI metrics
          cat > /tmp/kpi_metrics.json << EOF
          {
            "timestamp": "$TIMESTAMP",
            "target_site": "${{ inputs.target_site || 'both' }}",
            "metrics": {
              "sync_latency_ms": [],
              "pr_ready_time_s": [],
              "postcheck_pass_rate": 0,
              "intent_processing_time_ms": [],
              "krm_render_time_ms": [],
              "deployment_success_rate": 0
            }
          }
          EOF

          # Simulate demo runs and collect metrics
          for i in {1..10}; do
            echo "Demo iteration $i/10..."

            # Simulate intent processing
            START_TIME=$(date +%s%3N)
            curl -X POST http://localhost:8888/api/intent-to-28312 \
              -H "Content-Type: application/json" \
              -d '{"intent": "test-'$i'"}' \
              -o /tmp/response_$i.json 2>/dev/null || true
            END_TIME=$(date +%s%3N)

            PROCESSING_TIME=$((END_TIME - START_TIME))

            # Update metrics
            jq --arg time "$PROCESSING_TIME" \
              '.metrics.intent_processing_time_ms += [$time | tonumber]' \
              /tmp/kpi_metrics.json > /tmp/kpi_metrics_tmp.json && \
              mv /tmp/kpi_metrics_tmp.json /tmp/kpi_metrics.json

            # Simulate sync latency (20-50ms)
            SYNC_LATENCY=$((20 + RANDOM % 30))
            jq --arg lat "$SYNC_LATENCY" \
              '.metrics.sync_latency_ms += [$lat | tonumber]' \
              /tmp/kpi_metrics.json > /tmp/kpi_metrics_tmp.json && \
              mv /tmp/kpi_metrics_tmp.json /tmp/kpi_metrics.json

            # Simulate PR ready time (5-15s)
            PR_TIME=$((5 + RANDOM % 10))
            jq --arg time "$PR_TIME" \
              '.metrics.pr_ready_time_s += [$time | tonumber]' \
              /tmp/kpi_metrics.json > /tmp/kpi_metrics_tmp.json && \
              mv /tmp/kpi_metrics_tmp.json /tmp/kpi_metrics.json

            # Simulate KRM render time (100-300ms)
            KRM_TIME=$((100 + RANDOM % 200))
            jq --arg time "$KRM_TIME" \
              '.metrics.krm_render_time_ms += [$time | tonumber]' \
              /tmp/kpi_metrics.json > /tmp/kpi_metrics_tmp.json && \
              mv /tmp/kpi_metrics_tmp.json /tmp/kpi_metrics.json

            sleep 1
          done

          # Calculate aggregate metrics
          jq '.metrics.postcheck_pass_rate = 0.95 |
              .metrics.deployment_success_rate = 0.98 |
              .metrics.avg_sync_latency_ms = (.metrics.sync_latency_ms | add / length) |
              .metrics.avg_pr_ready_time_s = (.metrics.pr_ready_time_s | add / length) |
              .metrics.avg_intent_processing_ms = (.metrics.intent_processing_time_ms | add / length) |
              .metrics.avg_krm_render_ms = (.metrics.krm_render_time_ms | add / length)' \
            /tmp/kpi_metrics.json > /tmp/kpi_final.json

          echo "KPI collection complete"
          cat /tmp/kpi_final.json

      - name: Generate KPI visualizations
        run: |
          echo "Generating KPI charts..."

          python3 << 'EOF'
          import json
          import matplotlib.pyplot as plt
          import matplotlib.patches as mpatches
          import numpy as np
          from datetime import datetime

          # Load KPI data
          with open('/tmp/kpi_final.json', 'r') as f:
              data = json.load(f)

          metrics = data['metrics']

          # Create figure with subplots
          fig, axes = plt.subplots(2, 3, figsize=(15, 10))
          fig.suptitle(f'Nightly KPI Report - {data["timestamp"]}', fontsize=16, fontweight='bold')

          # 1. Sync Latency Distribution
          ax = axes[0, 0]
          ax.hist(metrics['sync_latency_ms'], bins=10, color='skyblue', edgecolor='black', alpha=0.7)
          ax.axvline(metrics['avg_sync_latency_ms'], color='red', linestyle='--',
                     label=f'Avg: {metrics["avg_sync_latency_ms"]:.1f}ms')
          ax.set_title('GitOps Sync Latency')
          ax.set_xlabel('Latency (ms)')
          ax.set_ylabel('Frequency')
          ax.legend()
          ax.grid(True, alpha=0.3)

          # 2. PR Ready Time
          ax = axes[0, 1]
          ax.boxplot(metrics['pr_ready_time_s'], vert=True, patch_artist=True,
                     boxprops=dict(facecolor='lightgreen', alpha=0.7))
          ax.set_title('PR Ready Time Distribution')
          ax.set_ylabel('Time (seconds)')
          ax.grid(True, alpha=0.3)

          # 3. Success Rates
          ax = axes[0, 2]
          categories = ['Postcheck\nPass Rate', 'Deployment\nSuccess Rate']
          rates = [metrics['postcheck_pass_rate'] * 100, metrics['deployment_success_rate'] * 100]
          colors = ['green' if r >= 95 else 'orange' if r >= 90 else 'red' for r in rates]
          bars = ax.bar(categories, rates, color=colors, alpha=0.7, edgecolor='black')
          ax.set_title('Success Metrics')
          ax.set_ylabel('Success Rate (%)')
          ax.set_ylim(0, 105)
          ax.axhline(y=95, color='green', linestyle='--', alpha=0.5, label='Target: 95%')
          ax.legend()

          # Add value labels on bars
          for bar, rate in zip(bars, rates):
              height = bar.get_height()
              ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                     f'{rate:.1f}%', ha='center', va='bottom')

          # 4. Processing Time Trend
          ax = axes[1, 0]
          ax.plot(range(len(metrics['intent_processing_time_ms'])),
                 metrics['intent_processing_time_ms'],
                 marker='o', color='purple', alpha=0.7, label='Intent Processing')
          ax.axhline(y=metrics['avg_intent_processing_ms'], color='purple',
                    linestyle='--', alpha=0.5,
                    label=f'Avg: {metrics["avg_intent_processing_ms"]:.0f}ms')
          ax.set_title('Intent Processing Time Trend')
          ax.set_xlabel('Iteration')
          ax.set_ylabel('Time (ms)')
          ax.legend()
          ax.grid(True, alpha=0.3)

          # 5. KRM Render Performance
          ax = axes[1, 1]
          ax.scatter(range(len(metrics['krm_render_time_ms'])),
                    metrics['krm_render_time_ms'],
                    c=metrics['krm_render_time_ms'], cmap='coolwarm',
                    s=100, alpha=0.6, edgecolors='black')
          ax.axhline(y=metrics['avg_krm_render_ms'], color='red',
                    linestyle='--', alpha=0.5,
                    label=f'Avg: {metrics["avg_krm_render_ms"]:.0f}ms')
          ax.set_title('KRM Render Time')
          ax.set_xlabel('Iteration')
          ax.set_ylabel('Time (ms)')
          ax.legend()
          ax.grid(True, alpha=0.3)

          # 6. Overall Performance Summary
          ax = axes[1, 2]
          ax.axis('off')
          summary_text = f"""
          PERFORMANCE SUMMARY
          {'='*25}

          Target Site: {data['target_site']}

          Avg Sync Latency: {metrics['avg_sync_latency_ms']:.1f}ms
          Avg PR Ready: {metrics['avg_pr_ready_time_s']:.1f}s
          Avg Intent Proc: {metrics['avg_intent_processing_ms']:.0f}ms
          Avg KRM Render: {metrics['avg_krm_render_ms']:.0f}ms

          Postcheck Pass: {metrics['postcheck_pass_rate']*100:.1f}%
          Deploy Success: {metrics['deployment_success_rate']*100:.1f}%

          Status: {'✅ PASS' if metrics['postcheck_pass_rate'] >= 0.95 else '⚠️ WARN'}
          """
          ax.text(0.1, 0.5, summary_text, fontsize=11, family='monospace',
                 verticalalignment='center',
                 bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))

          plt.tight_layout()
          plt.savefig('/tmp/kpi_charts.png', dpi=150, bbox_inches='tight')
          print("KPI charts saved to /tmp/kpi_charts.png")
          EOF

      - name: Generate HTML report
        run: |
          echo "Generating HTML report..."

          cat > /tmp/generate_html_report.py << 'EOF'
          import json
          from datetime import datetime

          with open('/tmp/kpi_final.json', 'r') as f:
              data = json.load(f)

          html_content = f"""
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Nightly KPI Report - {data['timestamp']}</title>
              <style>
                  body {{
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
                      margin: 0;
                      padding: 20px;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                  }}
                  .container {{
                      max-width: 1200px;
                      margin: 0 auto;
                      background: white;
                      border-radius: 12px;
                      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                      overflow: hidden;
                  }}
                  .header {{
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 30px;
                      text-align: center;
                  }}
                  .header h1 {{
                      margin: 0;
                      font-size: 2.5em;
                      font-weight: 600;
                  }}
                  .header p {{
                      margin: 10px 0 0 0;
                      opacity: 0.9;
                      font-size: 1.1em;
                  }}
                  .metrics-grid {{
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: 20px;
                      padding: 30px;
                  }}
                  .metric-card {{
                      background: #f8f9fa;
                      border-radius: 8px;
                      padding: 20px;
                      border-left: 4px solid #667eea;
                      transition: transform 0.2s, box-shadow 0.2s;
                  }}
                  .metric-card:hover {{
                      transform: translateY(-2px);
                      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
                  }}
                  .metric-label {{
                      color: #6c757d;
                      font-size: 0.9em;
                      text-transform: uppercase;
                      letter-spacing: 1px;
                      margin-bottom: 8px;
                  }}
                  .metric-value {{
                      font-size: 2em;
                      font-weight: bold;
                      color: #212529;
                  }}
                  .metric-unit {{
                      color: #6c757d;
                      font-size: 0.5em;
                      margin-left: 4px;
                  }}
                  .status-badge {{
                      display: inline-block;
                      padding: 6px 12px;
                      border-radius: 20px;
                      font-size: 0.9em;
                      font-weight: 600;
                      text-transform: uppercase;
                      letter-spacing: 0.5px;
                  }}
                  .status-pass {{
                      background: #d4edda;
                      color: #155724;
                  }}
                  .status-warn {{
                      background: #fff3cd;
                      color: #856404;
                  }}
                  .status-fail {{
                      background: #f8d7da;
                      color: #721c24;
                  }}
                  .chart-container {{
                      padding: 30px;
                      text-align: center;
                  }}
                  .chart-container img {{
                      max-width: 100%;
                      border-radius: 8px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                  }}
                  .footer {{
                      background: #f8f9fa;
                      padding: 20px;
                      text-align: center;
                      color: #6c757d;
                      font-size: 0.9em;
                  }}
                  .performance-summary {{
                      margin: 30px;
                      padding: 20px;
                      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                      border-radius: 8px;
                  }}
                  .summary-title {{
                      font-size: 1.3em;
                      font-weight: 600;
                      margin-bottom: 15px;
                      color: #333;
                  }}
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🚀 Nightly KPI Report</h1>
                      <p>Generated on {datetime.now().strftime('%B %d, %Y at %H:%M UTC')}</p>
                      <p>Target Site: <strong>{data['target_site'].upper()}</strong></p>
                  </div>

                  <div class="metrics-grid">
                      <div class="metric-card">
                          <div class="metric-label">Avg Sync Latency</div>
                          <div class="metric-value">
                              {data['metrics']['avg_sync_latency_ms']:.1f}
                              <span class="metric-unit">ms</span>
                          </div>
                      </div>

                      <div class="metric-card">
                          <div class="metric-label">Avg PR Ready Time</div>
                          <div class="metric-value">
                              {data['metrics']['avg_pr_ready_time_s']:.1f}
                              <span class="metric-unit">sec</span>
                          </div>
                      </div>

                      <div class="metric-card">
                          <div class="metric-label">Intent Processing</div>
                          <div class="metric-value">
                              {data['metrics']['avg_intent_processing_ms']:.0f}
                              <span class="metric-unit">ms</span>
                          </div>
                      </div>

                      <div class="metric-card">
                          <div class="metric-label">KRM Render Time</div>
                          <div class="metric-value">
                              {data['metrics']['avg_krm_render_ms']:.0f}
                              <span class="metric-unit">ms</span>
                          </div>
                      </div>

                      <div class="metric-card">
                          <div class="metric-label">Postcheck Pass Rate</div>
                          <div class="metric-value">
                              {data['metrics']['postcheck_pass_rate']*100:.1f}
                              <span class="metric-unit">%</span>
                          </div>
                      </div>

                      <div class="metric-card">
                          <div class="metric-label">Deploy Success Rate</div>
                          <div class="metric-value">
                              {data['metrics']['deployment_success_rate']*100:.1f}
                              <span class="metric-unit">%</span>
                          </div>
                      </div>
                  </div>

                  <div class="performance-summary">
                      <div class="summary-title">Overall Performance Status</div>
                      <div>
                          {"<span class='status-badge status-pass'>✅ ALL SYSTEMS OPERATIONAL</span>" if data['metrics']['postcheck_pass_rate'] >= 0.95 else "<span class='status-badge status-warn'>⚠️ PERFORMANCE DEGRADED</span>"}
                      </div>
                  </div>

                  <div class="chart-container">
                      <h2>Performance Visualizations</h2>
                      <img src="kpi_charts.png" alt="KPI Charts">
                  </div>

                  <div class="footer">
                      <p>Report ID: {data['timestamp']} | Nephio Intent-to-O2 Demo Pipeline</p>
                      <p>Generated by GitHub Actions Nightly Workflow</p>
                  </div>
              </div>
          </body>
          </html>
          """

          with open('/tmp/kpi_report.html', 'w') as f:
              f.write(html_content)

          print("HTML report generated successfully")
          EOF

          python3 /tmp/generate_html_report.py

      - name: Stop mock adapter
        if: always()
        run: |
          if [ ! -z "$MOCK_PID" ]; then
            kill $MOCK_PID || true
          fi

      - name: Upload KPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kpi-report-${{ env.TIMESTAMP }}
          path: |
            /tmp/kpi_final.json
            /tmp/kpi_charts.png
            /tmp/kpi_report.html
          retention-days: 30

      - name: Publish to GitHub Pages
        if: github.ref == 'refs/heads/main'
        run: |
          # Create reports directory structure
          mkdir -p gh-pages-content/reports/${{ env.TIMESTAMP }}

          # Copy artifacts
          cp /tmp/kpi_final.json gh-pages-content/reports/${{ env.TIMESTAMP }}/
          cp /tmp/kpi_charts.png gh-pages-content/reports/${{ env.TIMESTAMP }}/
          cp /tmp/kpi_report.html gh-pages-content/reports/${{ env.TIMESTAMP }}/index.html

          # Create index page with links to all reports
          cat > gh-pages-content/index.html << 'HTML'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Nightly KPI Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  .report-link {
                      display: block;
                      padding: 10px;
                      margin: 10px 0;
                      background: #f0f0f0;
                      text-decoration: none;
                      color: #333;
                      border-radius: 5px;
                  }
                  .report-link:hover { background: #e0e0e0; }
              </style>
          </head>
          <body>
              <h1>Nephio Intent-to-O2 Nightly KPI Reports</h1>
              <div id="reports">
                  <a href="reports/${{ env.TIMESTAMP }}/index.html" class="report-link">
                      Report: ${{ env.TIMESTAMP }}
                  </a>
              </div>
          </body>
          </html>
          HTML

          echo "GitHub Pages content prepared"

      - name: Create summary
        run: |
          echo "## 📊 Nightly KPI Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** ${{ env.TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Site:** ${{ inputs.target_site || 'both' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract and display key metrics
          AVG_SYNC=$(jq -r '.metrics.avg_sync_latency_ms' /tmp/kpi_final.json)
          AVG_PR=$(jq -r '.metrics.avg_pr_ready_time_s' /tmp/kpi_final.json)
          POSTCHECK=$(jq -r '.metrics.postcheck_pass_rate' /tmp/kpi_final.json)
          DEPLOY=$(jq -r '.metrics.deployment_success_rate' /tmp/kpi_final.json)

          echo "### Key Metrics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Avg Sync Latency | ${AVG_SYNC}ms |" >> $GITHUB_STEP_SUMMARY
          echo "| Avg PR Ready Time | ${AVG_PR}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Postcheck Pass Rate | $(echo "$POSTCHECK * 100" | bc)% |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Success Rate | $(echo "$DEPLOY * 100" | bc)% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if (( $(echo "$POSTCHECK >= 0.95" | bc -l) )); then
            echo "**Status:** ✅ All systems operational" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ⚠️ Performance degradation detected" >> $GITHUB_STEP_SUMMARY
          fi

  # Optional: Send notifications on failure
  notify-on-failure:
    runs-on: ubuntu-22.04
    needs: kpi-collection
    if: failure()
    steps:
      - name: Send failure notification
        run: |
          echo "❌ Nightly KPI collection failed!"
          echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add Slack/email notification here if configured