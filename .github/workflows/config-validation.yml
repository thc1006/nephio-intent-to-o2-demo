# Configuration Validation CI/CD Pipeline
#
# 此工作流程確保權威配置文件的格式正確性和一致性
# 防止因配置錯誤導致的系統故障

name: Configuration Validation

on:
  push:
    paths:
      - 'config/**'
      - 'scripts/**'
      - 'examples/**'
  pull_request:
    paths:
      - 'config/**'
      - 'scripts/**'
      - 'examples/**'
  workflow_dispatch:

jobs:
  yaml-validation:
    name: YAML Configuration Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests jsonschema

    - name: Install yq
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq

    - name: Validate YAML syntax
      run: |
        echo "🔍 驗證 YAML 語法..."
        find config/ -name "*.yaml" -o -name "*.yml" | while read file; do
          echo "檢查: $file"
          python -c "
import yaml
import sys
try:
    with open('$file', 'r') as f:
        yaml.safe_load(f)
    print('✅ $file - YAML 格式正確')
except yaml.YAMLError as e:
    print('❌ $file - YAML 格式錯誤: {e}')
    sys.exit(1)
except Exception as e:
    print('❌ $file - 讀取錯誤: {e}')
    sys.exit(1)
"
        done

    - name: Validate configuration schema
      run: |
        echo "🔍 驗證配置架構..."
        python examples/config_reader.py || exit 1

    - name: Test configuration loading
      run: |
        echo "🔍 測試配置載入..."
        cd scripts
        bash load_config.sh || exit 1

    - name: Validate site endpoints
      run: |
        echo "🔍 驗證站點端點配置..."
        python -c "
from examples.config_reader import EdgeSiteConfig
import sys

try:
    config = EdgeSiteConfig()

    # 檢查必要的站點配置
    required_sites = ['edge1', 'edge2']
    for site in required_sites:
        try:
            slo_url = config.get_slo_endpoint(site)
            health_url = config.get_health_check_url(site)
            print(f'✅ {site}: SLO={slo_url}, Health={health_url}')
        except Exception as e:
            print(f'❌ {site}: 配置錯誤 - {e}')
            sys.exit(1)

    # 檢查閾值配置
    thresholds = config.get_slo_thresholds()
    required_thresholds = ['latency_p95_ms', 'success_rate_min', 'throughput_p95_mbps']
    for threshold in required_thresholds:
        if threshold not in thresholds:
            print(f'❌ 缺少閾值配置: {threshold}')
            sys.exit(1)
        print(f'✅ 閾值 {threshold}: {thresholds[threshold]}')

    print('✅ 所有配置驗證通過')

except Exception as e:
    print(f'❌ 配置驗證失敗: {e}')
    sys.exit(1)
"

  script-validation:
    name: Script Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck bc

    - name: Validate shell scripts
      run: |
        echo "🔍 驗證 Shell 腳本語法..."
        find scripts/ -name "*.sh" | while read script; do
          echo "檢查: $script"
          if shellcheck "$script"; then
            echo "✅ $script - Shell 語法正確"
          else
            echo "❌ $script - Shell 語法錯誤"
            exit 1
          fi
        done

    - name: Test script executability
      run: |
        echo "🔍 測試腳本可執行性..."
        for script in scripts/load_config.sh scripts/postcheck_v2.sh; do
          if [[ -x "$script" ]]; then
            echo "✅ $script - 可執行"
          else
            echo "❌ $script - 不可執行"
            exit 1
          fi
        done

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [yaml-validation, script-validation]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests
        sudo apt-get update
        sudo apt-get install -y bc jq

    - name: Install yq
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq

    - name: Test configuration integration
      run: |
        echo "🔍 測試配置整合..."

        # 測試配置載入
        cd scripts
        source load_config.sh

        # 驗證變量是否正確設置
        if [[ -z "${SITES[@]:-}" ]]; then
          echo "❌ SITES 配置未載入"
          exit 1
        fi

        if [[ -z "${O2IMS_SITES[@]:-}" ]]; then
          echo "❌ O2IMS_SITES 配置未載入"
          exit 1
        fi

        echo "✅ 配置變量載入成功"
        echo "✅ 站點數量: ${#SITES[@]}"

        # 測試 postcheck_v2.sh 的配置載入（乾跑）
        echo "🔍 測試 postcheck_v2.sh 配置載入..."
        timeout 10 bash postcheck_v2.sh --dry-run 2>/dev/null || echo "✅ postcheck_v2.sh 配置載入測試完成"

  report-generation:
    name: Generate Validation Report
    runs-on: ubuntu-latest
    needs: [yaml-validation, script-validation, integration-test]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate validation report
      run: |
        echo "📊 生成驗證報告..."

        cat > validation-report.md << 'EOF'
# Configuration Validation Report

**日期**: $(date)
**提交**: ${{ github.sha }}
**分支**: ${{ github.ref_name }}

## 驗證結果

| 檢查項目 | 狀態 | 說明 |
|---------|------|------|
| YAML 語法 | ${{ needs.yaml-validation.result == 'success' && '✅ 通過' || '❌ 失敗' }} | 配置文件語法檢查 |
| 腳本語法 | ${{ needs.script-validation.result == 'success' && '✅ 通過' || '❌ 失敗' }} | Shell 腳本語法檢查 |
| 整合測試 | ${{ needs.integration-test.result == 'success' && '✅ 通過' || '❌ 失敗' }} | 配置載入和整合測試 |

## 配置檔案狀態

- `config/edge-sites-config.yaml`: 權威配置文件
- `scripts/load_config.sh`: 配置載入器
- `scripts/postcheck_v2.sh`: 配置驅動的 postcheck 腳本
- `examples/config_reader.py`: Python 配置讀取器

## 建議行動

${{ needs.yaml-validation.result == 'success' && needs.script-validation.result == 'success' && needs.integration-test.result == 'success' && '✅ 所有檢查通過，可以合併' || '❌ 存在問題，需要修復後再次提交' }}

EOF

        echo "✅ 驗證報告已生成"

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation-report.md