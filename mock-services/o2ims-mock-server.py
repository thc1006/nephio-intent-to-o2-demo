#!/usr/bin/env python3
"""
O2IMS Mock Server - Implementation of O-RAN O2IMS Interface Specification 3.0

This mock server provides realistic responses for the O2IMS infrastructure inventory
and management API, supporting 4 edge sites (edge1-4) with comprehensive data models.

Author: Generated by Claude Code
License: MIT
"""

import logging
import sys
import uuid
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any, Union
from enum import Enum

import uvicorn
from fastapi import FastAPI, HTTPException, Query, Request, Response, Path
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field, field_validator
from pydantic.types import UUID4


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/tmp/o2ims-mock-server.log')
    ]
)
logger = logging.getLogger(__name__)


# Enums for O2IMS specification
class AlarmType(str, Enum):
    """Alarm types as per O2IMS specification"""
    COMMUNICATIONS_ALARM = "COMMUNICATIONS_ALARM"
    PROCESSING_ERROR_ALARM = "PROCESSING_ERROR_ALARM"
    ENVIRONMENTAL_ALARM = "ENVIRONMENTAL_ALARM"
    QUALITY_OF_SERVICE_ALARM = "QUALITY_OF_SERVICE_ALARM"
    EQUIPMENT_ALARM = "EQUIPMENT_ALARM"
    INTEGRITY_VIOLATION = "INTEGRITY_VIOLATION"
    OPERATIONAL_VIOLATION = "OPERATIONAL_VIOLATION"
    PHYSICAL_VIOLATION = "PHYSICAL_VIOLATION"
    SECURITY_SERVICE_VIOLATION = "SECURITY_SERVICE_VIOLATION"
    MECHANISM_VIOLATION = "MECHANISM_VIOLATION"
    TIME_DOMAIN_VIOLATION = "TIME_DOMAIN_VIOLATION"


class AlarmSeverity(str, Enum):
    """Alarm severity levels"""
    CLEARED = "CLEARED"
    INDETERMINATE = "INDETERMINATE"
    WARNING = "WARNING"
    MINOR = "MINOR"
    MAJOR = "MAJOR"
    CRITICAL = "CRITICAL"


class ResourcePoolType(str, Enum):
    """Resource pool types"""
    COMPUTE = "COMPUTE"
    STORAGE = "STORAGE"
    NETWORK = "NETWORK"
    MIXED = "MIXED"


class ResourceType(str, Enum):
    """Resource types"""
    VIRTUAL_MACHINE = "VIRTUAL_MACHINE"
    CONTAINER = "CONTAINER"
    PHYSICAL_SERVER = "PHYSICAL_SERVER"
    NETWORK_FUNCTION = "NETWORK_FUNCTION"
    STORAGE_VOLUME = "STORAGE_VOLUME"


class DeploymentManagerType(str, Enum):
    """Deployment manager types"""
    KUBERNETES = "KUBERNETES"
    OPENSTACK = "OPENSTACK"
    DOCKER = "DOCKER"
    HELM = "HELM"


# Data Models
class BaseO2IMSModel(BaseModel):
    """Base model for all O2IMS entities"""

    class Config:
        use_enum_values = True
        allow_population_by_field_name = True


class GlobalCloudId(BaseO2IMSModel):
    """Global cloud identifier"""
    value: str = Field(..., description="Global cloud identifier value")


class O2IMSStatus(BaseO2IMSModel):
    """O2IMS service status response"""
    global_cloud_id: GlobalCloudId
    description: str = Field(default="O2IMS Mock Server", description="Service description")
    service_uri: str = Field(..., description="Base URI of the O2IMS service")
    supported_locales: List[str] = Field(default=["en-US"], description="Supported locales")
    supported_time_zones: List[str] = Field(default=["UTC"], description="Supported time zones")


class ResourcePoolInfo(BaseO2IMSModel):
    """Resource pool information"""
    resource_pool_id: UUID4 = Field(..., description="Unique identifier for the resource pool")
    name: str = Field(..., description="Human-readable name of the resource pool")
    description: Optional[str] = Field(None, description="Description of the resource pool")
    location: Optional[str] = Field(None, description="Physical location of the resource pool")
    resource_type_list: List[ResourceType] = Field(..., description="Types of resources in this pool")
    resource_pool_type: ResourcePoolType = Field(..., description="Type of the resource pool")
    global_location_id: Optional[str] = Field(None, description="Global location identifier")
    extensions: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Vendor-specific extensions")


class DeploymentManagerInfo(BaseO2IMSModel):
    """Deployment manager information"""
    deployment_manager_id: UUID4 = Field(..., description="Unique identifier for the deployment manager")
    name: str = Field(..., description="Human-readable name of the deployment manager")
    description: Optional[str] = Field(None, description="Description of the deployment manager")
    deployment_manager_type: DeploymentManagerType = Field(..., description="Type of deployment manager")
    service_uri: str = Field(..., description="Service URI of the deployment manager")
    supported_locales: List[str] = Field(default=["en-US"], description="Supported locales")
    capabilities: Dict[str, Any] = Field(default_factory=dict, description="Manager capabilities")
    capacity: Dict[str, Any] = Field(default_factory=dict, description="Resource capacity information")
    extensions: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Vendor-specific extensions")


class InfrastructureProvisioningRequest(BaseO2IMSModel):
    """Infrastructure provisioning request"""
    infrastructure_request_id: UUID4 = Field(..., description="Unique identifier for the request")
    name: str = Field(..., description="Human-readable name of the request")
    description: Optional[str] = Field(None, description="Description of the request")
    request_type: str = Field(..., description="Type of provisioning request")
    request_status: str = Field(..., description="Current status of the request")
    created_at: datetime = Field(..., description="Request creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    requested_capacity: Dict[str, Any] = Field(default_factory=dict, description="Requested resource capacity")
    allocated_capacity: Optional[Dict[str, Any]] = Field(None, description="Currently allocated capacity")
    extensions: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Vendor-specific extensions")


class AlarmEventRecord(BaseO2IMSModel):
    """Alarm event record"""
    alarm_event_record_id: UUID4 = Field(..., description="Unique identifier for the alarm")
    resource_id: UUID4 = Field(..., description="Identifier of the affected resource")
    resource_type_id: str = Field(..., description="Type of the affected resource")
    alarm_type: AlarmType = Field(..., description="Type of alarm")
    probable_cause_id: str = Field(..., description="Probable cause identifier")
    alarm_raised_time: datetime = Field(..., description="Time when alarm was raised")
    alarm_changed_time: Optional[datetime] = Field(None, description="Time when alarm was last changed")
    alarm_cleared_time: Optional[datetime] = Field(None, description="Time when alarm was cleared")
    alarm_acknowledged_time: Optional[datetime] = Field(None, description="Time when alarm was acknowledged")
    perceived_severity: AlarmSeverity = Field(..., description="Perceived severity of the alarm")
    extensions: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Vendor-specific extensions")


# Mock Data Generation
class MockDataGenerator:
    """Generates realistic mock data for O2IMS entities"""

    def __init__(self):
        self.edge_sites = ["edge1", "edge2", "edge3", "edge4"]
        self.base_timestamp = datetime.now(timezone.utc)

        # Pre-generate UUIDs for consistency
        self.deployment_manager_ids = {
            f"edge{i}": uuid.uuid4() for i in range(1, 5)
        }
        self.resource_pool_ids = {
            f"edge{i}": [uuid.uuid4() for _ in range(3)] for i in range(1, 5)
        }

    def generate_status(self) -> O2IMSStatus:
        """Generate O2IMS status response"""
        return O2IMSStatus(
            global_cloud_id=GlobalCloudId(value="nephio-intent-o2-demo-cloud"),
            description="O2IMS Mock Server for Nephio Intent-to-O2 Demo",
            service_uri="http://localhost:30205/o2ims_infrastructureInventory/v1",
            supported_locales=["en-US", "en-GB"],
            supported_time_zones=["UTC", "America/New_York", "Europe/London"]
        )

    def generate_deployment_managers(self, filters: Optional[Dict] = None) -> List[DeploymentManagerInfo]:
        """Generate deployment manager information for all edge sites"""
        managers = []

        for i, site in enumerate(self.edge_sites, 1):
            manager = DeploymentManagerInfo(
                deployment_manager_id=self.deployment_manager_ids[site],
                name=f"Kubernetes-{site.upper()}",
                description=f"Kubernetes deployment manager for {site.upper()} edge site",
                deployment_manager_type=DeploymentManagerType.KUBERNETES,
                service_uri=f"https://kubernetes-{site}.nephio.local:6443",
                supported_locales=["en-US"],
                capabilities={
                    "helm_support": True,
                    "cni_plugins": ["flannel", "calico"],
                    "storage_classes": ["local-path", "nfs"],
                    "ingress_controllers": ["nginx", "traefik"],
                    "monitoring": {
                        "prometheus": True,
                        "grafana": True,
                        "jaeger": True
                    }
                },
                capacity={
                    "total_nodes": 3 + i,
                    "total_cpu_cores": 32 * (3 + i),
                    "total_memory_gb": 128 * (3 + i),
                    "total_storage_gb": 1000 * (3 + i),
                    "available_cpu_cores": 16 * (3 + i),
                    "available_memory_gb": 64 * (3 + i),
                    "available_storage_gb": 500 * (3 + i)
                },
                extensions={
                    "kubernetes_version": "v1.28.3",
                    "container_runtime": "containerd",
                    "cluster_cidr": f"10.{200 + i}.0.0/16",
                    "service_cidr": f"10.{100 + i}.0.0/16",
                    "pod_cidr": f"10.{150 + i}.0.0/16"
                }
            )
            managers.append(manager)

        # Apply filters if provided
        if filters:
            managers = self._apply_filters(managers, filters)

        return managers

    def generate_resource_pools(self, filters: Optional[Dict] = None) -> List[ResourcePoolInfo]:
        """Generate resource pool information for all edge sites"""
        pools = []

        for i, site in enumerate(self.edge_sites, 1):
            # Compute pool
            compute_pool = ResourcePoolInfo(
                resource_pool_id=self.resource_pool_ids[site][0],
                name=f"{site.upper()}-COMPUTE",
                description=f"Compute resource pool for {site.upper()} edge site",
                location=f"Edge Site {i} - Rack A",
                resource_type_list=[ResourceType.VIRTUAL_MACHINE, ResourceType.CONTAINER],
                resource_pool_type=ResourcePoolType.COMPUTE,
                global_location_id=f"global-location-{site}",
                extensions={
                    "cpu_architecture": "x86_64",
                    "hypervisor": "KVM",
                    "numa_topology": True,
                    "hardware_acceleration": ["SR-IOV", "DPDK"],
                    "total_nodes": 3 + i,
                    "node_specifications": {
                        "cpu_cores_per_node": 32,
                        "memory_gb_per_node": 128,
                        "storage_gb_per_node": 1000
                    }
                }
            )

            # Storage pool
            storage_pool = ResourcePoolInfo(
                resource_pool_id=self.resource_pool_ids[site][1],
                name=f"{site.upper()}-STORAGE",
                description=f"Storage resource pool for {site.upper()} edge site",
                location=f"Edge Site {i} - Rack B",
                resource_type_list=[ResourceType.STORAGE_VOLUME],
                resource_pool_type=ResourcePoolType.STORAGE,
                global_location_id=f"global-location-{site}",
                extensions={
                    "storage_types": ["SSD", "NVMe"],
                    "replication_factor": 3,
                    "erasure_coding": True,
                    "compression": True,
                    "encryption": "AES-256",
                    "total_capacity_tb": 10 * (i + 1),
                    "available_capacity_tb": 5 * (i + 1),
                    "iops_capability": 100000 * i
                }
            )

            # Network pool
            network_pool = ResourcePoolInfo(
                resource_pool_id=self.resource_pool_ids[site][2],
                name=f"{site.upper()}-NETWORK",
                description=f"Network resource pool for {site.upper()} edge site",
                location=f"Edge Site {i} - Network Equipment",
                resource_type_list=[ResourceType.NETWORK_FUNCTION],
                resource_pool_type=ResourcePoolType.NETWORK,
                global_location_id=f"global-location-{site}",
                extensions={
                    "network_functions": ["UPF", "AMF", "SMF", "AUSF", "UDM"],
                    "bandwidth_gbps": 100 * i,
                    "latency_ms": 1.0 + (0.1 * i),
                    "supported_standards": ["5G-NR", "LTE", "WiFi-6"],
                    "slice_support": True,
                    "edge_computing": True,
                    "mec_capabilities": ["traffic_steering", "local_breakout", "edge_analytics"]
                }
            )

            pools.extend([compute_pool, storage_pool, network_pool])

        # Apply filters if provided
        if filters:
            pools = self._apply_filters(pools, filters)

        return pools

    def generate_provisioning_requests(self, dm_id: str, filters: Optional[Dict] = None) -> List[InfrastructureProvisioningRequest]:
        """Generate infrastructure provisioning requests for a deployment manager"""
        requests = []

        # Find which edge site this deployment manager belongs to
        site = None
        for edge_site, manager_id in self.deployment_manager_ids.items():
            if str(manager_id) == dm_id:
                site = edge_site
                break

        if not site:
            return requests

        # Generate sample provisioning requests
        request_templates = [
            {
                "name": f"5G-Core-{site.upper()}",
                "description": f"5G Core Network Functions deployment for {site.upper()}",
                "request_type": "NETWORK_FUNCTION_DEPLOYMENT",
                "request_status": "COMPLETED",
                "requested_capacity": {
                    "cpu_cores": 16,
                    "memory_gb": 64,
                    "storage_gb": 200,
                    "network_bandwidth_mbps": 1000
                },
                "allocated_capacity": {
                    "cpu_cores": 16,
                    "memory_gb": 64,
                    "storage_gb": 200,
                    "network_bandwidth_mbps": 1000
                }
            },
            {
                "name": f"Edge-Apps-{site.upper()}",
                "description": f"Edge applications deployment for {site.upper()}",
                "request_type": "APPLICATION_DEPLOYMENT",
                "request_status": "IN_PROGRESS",
                "requested_capacity": {
                    "cpu_cores": 8,
                    "memory_gb": 32,
                    "storage_gb": 100,
                    "gpu_units": 1
                },
                "allocated_capacity": {
                    "cpu_cores": 6,
                    "memory_gb": 24,
                    "storage_gb": 80,
                    "gpu_units": 0
                }
            },
            {
                "name": f"Monitoring-{site.upper()}",
                "description": f"Monitoring stack deployment for {site.upper()}",
                "request_type": "MONITORING_DEPLOYMENT",
                "request_status": "PENDING",
                "requested_capacity": {
                    "cpu_cores": 4,
                    "memory_gb": 16,
                    "storage_gb": 500
                },
                "allocated_capacity": None
            }
        ]

        for i, template in enumerate(request_templates):
            request = InfrastructureProvisioningRequest(
                infrastructure_request_id=uuid.uuid4(),
                name=template["name"],
                description=template["description"],
                request_type=template["request_type"],
                request_status=template["request_status"],
                created_at=self.base_timestamp.replace(hour=10 + i, minute=0, second=0),
                updated_at=self.base_timestamp.replace(hour=10 + i, minute=30, second=0),
                requested_capacity=template["requested_capacity"],
                allocated_capacity=template["allocated_capacity"],
                extensions={
                    "deployment_manager_id": dm_id,
                    "edge_site": site,
                    "priority": "high" if i == 0 else "medium",
                    "estimated_completion": (self.base_timestamp.replace(hour=16 + i)).isoformat()
                }
            )
            requests.append(request)

        # Apply filters if provided
        if filters:
            requests = self._apply_filters(requests, filters)

        return requests

    def _apply_filters(self, items: List[Any], filters: Dict) -> List[Any]:
        """Apply query parameter filters to items"""
        filtered_items = items

        # Filter by field values
        for field, value in filters.items():
            if field in ['limit', 'offset']:
                continue

            filtered_items = [
                item for item in filtered_items
                if hasattr(item, field) and str(getattr(item, field, "")).lower() == str(value).lower()
            ]

        # Apply pagination
        offset = int(filters.get('offset', 0))
        limit = int(filters.get('limit', 100))

        return filtered_items[offset:offset + limit]


# Initialize mock data generator
mock_data = MockDataGenerator()

# FastAPI app initialization
app = FastAPI(
    title="O2IMS Mock Server",
    description="Mock implementation of O-RAN O2IMS Interface Specification 3.0",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Middleware for request logging
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Log all incoming requests"""
    start_time = datetime.now()

    # Log request details
    logger.info(f"Request: {request.method} {request.url}")
    logger.info(f"Headers: {dict(request.headers)}")

    if request.query_params:
        logger.info(f"Query Parameters: {dict(request.query_params)}")

    # Process request
    response = await call_next(request)

    # Log response details
    duration = (datetime.now() - start_time).total_seconds()
    logger.info(f"Response: {response.status_code} - Duration: {duration:.3f}s")

    return response


# Health check endpoint
@app.get("/health", tags=["Health"])
async def health_check():
    """Health check endpoint for monitoring"""
    return {
        "status": "healthy",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "service": "O2IMS Mock Server",
        "version": "1.0.0"
    }


# O2IMS API Endpoints
@app.get("/o2ims_infrastructureInventory/v1/status", response_model=O2IMSStatus, tags=["O2IMS"])
async def get_o2ims_status():
    """
    Get O2IMS service status and capabilities

    Returns the current status of the O2IMS service including supported features,
    locales, and time zones.
    """
    logger.info("Fetching O2IMS status")
    return mock_data.generate_status()


@app.get("/o2ims_infrastructureInventory/v1/deploymentManagers", response_model=List[DeploymentManagerInfo], tags=["O2IMS"])
async def get_deployment_managers(
    filter: Optional[str] = Query(None, description="Filter expression"),
    limit: Optional[int] = Query(100, ge=1, le=1000, description="Maximum number of items to return"),
    offset: Optional[int] = Query(0, ge=0, description="Number of items to skip"),
    deployment_manager_type: Optional[DeploymentManagerType] = Query(None, description="Filter by deployment manager type")
):
    """
    Get list of deployment managers

    Returns information about all deployment managers managing infrastructure
    resources in the O2IMS domain.
    """
    logger.info(f"Fetching deployment managers with filters: limit={limit}, offset={offset}, type={deployment_manager_type}")

    filters = {"limit": limit, "offset": offset}
    if deployment_manager_type:
        filters["deployment_manager_type"] = deployment_manager_type

    managers = mock_data.generate_deployment_managers(filters)
    logger.info(f"Returning {len(managers)} deployment managers")

    return managers


@app.get("/o2ims_infrastructureInventory/v1/resourcePools", response_model=List[ResourcePoolInfo], tags=["O2IMS"])
async def get_resource_pools(
    filter: Optional[str] = Query(None, description="Filter expression"),
    limit: Optional[int] = Query(100, ge=1, le=1000, description="Maximum number of items to return"),
    offset: Optional[int] = Query(0, ge=0, description="Number of items to skip"),
    resource_pool_type: Optional[ResourcePoolType] = Query(None, description="Filter by resource pool type"),
    location: Optional[str] = Query(None, description="Filter by location")
):
    """
    Get list of resource pools

    Returns information about all resource pools available in the O2IMS domain,
    including compute, storage, and network resource pools.
    """
    logger.info(f"Fetching resource pools with filters: limit={limit}, offset={offset}, type={resource_pool_type}, location={location}")

    filters = {"limit": limit, "offset": offset}
    if resource_pool_type:
        filters["resource_pool_type"] = resource_pool_type
    if location:
        filters["location"] = location

    pools = mock_data.generate_resource_pools(filters)
    logger.info(f"Returning {len(pools)} resource pools")

    return pools


@app.get("/o2ims_infrastructureInventory/v1/deploymentManagers/{dmId}/o2ims_infrastructureProvisioningRequest",
         response_model=List[InfrastructureProvisioningRequest], tags=["O2IMS"])
async def get_infrastructure_provisioning_requests(
    dmId: str = Path(..., description="Deployment Manager ID"),
    filter: Optional[str] = Query(None, description="Filter expression"),
    limit: Optional[int] = Query(100, ge=1, le=1000, description="Maximum number of items to return"),
    offset: Optional[int] = Query(0, ge=0, description="Number of items to skip"),
    request_status: Optional[str] = Query(None, description="Filter by request status")
):
    """
    Get infrastructure provisioning requests for a specific deployment manager

    Returns all infrastructure provisioning requests associated with the specified
    deployment manager, including pending, in-progress, and completed requests.
    """
    logger.info(f"Fetching provisioning requests for deployment manager {dmId}")

    # Validate deployment manager exists
    all_managers = mock_data.generate_deployment_managers()
    dm_exists = any(str(dm.deployment_manager_id) == dmId for dm in all_managers)

    if not dm_exists:
        logger.error(f"Deployment manager {dmId} not found")
        raise HTTPException(status_code=404, detail=f"Deployment manager {dmId} not found")

    filters = {"limit": limit, "offset": offset}
    if request_status:
        filters["request_status"] = request_status

    requests = mock_data.generate_provisioning_requests(dmId, filters)
    logger.info(f"Returning {len(requests)} provisioning requests for deployment manager {dmId}")

    return requests


# Additional utility endpoints
@app.get("/o2ims_infrastructureInventory/v1/deploymentManagers/{dmId}", response_model=DeploymentManagerInfo, tags=["O2IMS"])
async def get_deployment_manager_by_id(dmId: str):
    """Get specific deployment manager by ID"""
    logger.info(f"Fetching deployment manager {dmId}")

    all_managers = mock_data.generate_deployment_managers()
    manager = next((dm for dm in all_managers if str(dm.deployment_manager_id) == dmId), None)

    if not manager:
        logger.error(f"Deployment manager {dmId} not found")
        raise HTTPException(status_code=404, detail=f"Deployment manager {dmId} not found")

    return manager


@app.get("/o2ims_infrastructureInventory/v1/resourcePools/{poolId}", response_model=ResourcePoolInfo, tags=["O2IMS"])
async def get_resource_pool_by_id(poolId: str):
    """Get specific resource pool by ID"""
    logger.info(f"Fetching resource pool {poolId}")

    all_pools = mock_data.generate_resource_pools()
    pool = next((rp for rp in all_pools if str(rp.resource_pool_id) == poolId), None)

    if not pool:
        logger.error(f"Resource pool {poolId} not found")
        raise HTTPException(status_code=404, detail=f"Resource pool {poolId} not found")

    return pool


# Error handlers
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Custom HTTP exception handler"""
    logger.error(f"HTTP {exc.status_code}: {exc.detail} - Request: {request.method} {request.url}")
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": {
                "status": exc.status_code,
                "title": exc.detail,
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "path": str(request.url)
            }
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """General exception handler"""
    logger.error(f"Unhandled exception: {exc} - Request: {request.method} {request.url}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": {
                "status": 500,
                "title": "Internal Server Error",
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "path": str(request.url)
            }
        }
    )


if __name__ == "__main__":
    logger.info("Starting O2IMS Mock Server on port 30205")
    uvicorn.run(
        "o2ims-mock-server:app",
        host="0.0.0.0",
        port=30205,
        reload=False,
        log_level="info",
        access_log=True
    )