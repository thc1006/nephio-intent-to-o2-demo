apiVersion: v1
kind: ConfigMap
metadata:
  name: hey-load-test-script
  namespace: slo-monitoring
data:
  run-load-test.sh: |
    #!/bin/sh
    set -e

    echo "Starting hey load test for 30 seconds..."

    # Run hey load test and capture output
    TARGET_URL="http://echo-service-v2.slo-monitoring.svc.cluster.local:8080"

    # Run hey for 30 seconds with 10 concurrent workers
    hey -z 30s -c 10 -q 50 -o csv "$TARGET_URL" > /tmp/hey-results.csv 2>&1 || true

    # Parse hey output and generate SLO JSON
    echo "Parsing results and generating SLO JSON..."

    # Get summary statistics from hey (last run)
    hey -z 5s -c 5 -q 10 "$TARGET_URL" > /tmp/hey-summary.txt 2>&1

    # Extract metrics from hey output
    TOTAL_REQUESTS=$(grep "Total:" /tmp/hey-summary.txt | awk '{print $2}' || echo "0")
    SUCCESS_RATE=$(grep "Success" /tmp/hey-summary.txt | grep -oE '[0-9]+\.[0-9]+' | head -1 || echo "0")
    RPS=$(grep "Requests/sec:" /tmp/hey-summary.txt | awk '{print $2}' || echo "0")
    P50=$(grep "50%" /tmp/hey-summary.txt | awk '{print $2}' || echo "0")
    P95=$(grep "95%" /tmp/hey-summary.txt | awk '{print $2}' || echo "0")
    P99=$(grep "99%" /tmp/hey-summary.txt | awk '{print $2}' || echo "0")

    # Convert to milliseconds (assuming hey outputs in seconds)
    # Using awk since bc might not be available
    P50_MS=$(echo "$P50" | awk '{print $1 * 1000}' 2>/dev/null || echo "0")
    P95_MS=$(echo "$P95" | awk '{print $1 * 1000}' 2>/dev/null || echo "0")
    P99_MS=$(echo "$P99" | awk '{print $1 * 1000}' 2>/dev/null || echo "0")

    # Generate JSON
    cat > /tmp/slo-metrics.json <<EOF
    {
      "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
      "service": "echo-service-v2",
      "metrics": {
        "total_requests": ${TOTAL_REQUESTS:-0},
        "success_rate": ${SUCCESS_RATE:-100},
        "requests_per_second": ${RPS:-0},
        "latency_p50_ms": ${P50_MS:-0},
        "latency_p95_ms": ${P95_MS:-0},
        "latency_p99_ms": ${P99_MS:-0}
      },
      "test_duration_seconds": 30,
      "concurrent_workers": 10
    }
    EOF

    echo "SLO metrics generated:"
    cat /tmp/slo-metrics.json

    # Send to SLO collector
    curl -X POST http://slo-collector.slo-monitoring.svc.cluster.local:8090/metrics \
      -H "Content-Type: application/json" \
      -d @/tmp/slo-metrics.json || echo "Failed to send metrics to collector"

    echo "Load test completed successfully"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: hey-load-test
  namespace: slo-monitoring
spec:
  template:
    spec:
      containers:
      - name: hey-tester
        image: williamyeh/hey:latest
        command: ["/bin/sh"]
        args: ["/scripts/run-load-test.sh"]
        volumeMounts:
        - name: script
          mountPath: /scripts
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
      restartPolicy: OnFailure
      volumes:
      - name: script
        configMap:
          name: hey-load-test-script
          defaultMode: 0755
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: hey-load-test-cron
  namespace: slo-monitoring
spec:
  schedule: "*/10 * * * *"  # Run every 10 minutes
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hey-tester
            image: williamyeh/hey:latest
            command: ["/bin/sh"]
            args: ["/scripts/run-load-test.sh"]
            volumeMounts:
            - name: script
              mountPath: /scripts
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 256Mi
          restartPolicy: OnFailure
          volumes:
          - name: script
            configMap:
              name: hey-load-test-script
              defaultMode: 0755