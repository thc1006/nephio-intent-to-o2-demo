#!/bin/bash

# Watch GitHub workflows and update docs incrementally when they turn GREEN
# Usage: ./scripts/watch-workflows.sh

set -euo pipefail

REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
DOCS_DIR="${REPO_ROOT}/docs"
ARTIFACTS_DIR="${REPO_ROOT}/artifacts"

# Configuration
WORKFLOW_CHECK_INTERVAL=30  # seconds
DOC_UPDATE_BRANCH="docs-auto-update"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >&2
}

check_workflow_status() {
    local workflow_name="$1"
    
    # Use gh CLI to check workflow status
    if ! command -v gh >/dev/null 2>&1; then
        log "ERROR: gh CLI not found. Install with: curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg"
        return 1
    fi
    
    # Get latest workflow run status
    local status
    status=$(gh run list --workflow="${workflow_name}" --limit=1 --json status --jq '.[0].status' 2>/dev/null || echo "unknown")
    
    echo "${status}"
}

update_architecture_docs() {
    log "Updating ARCHITECTURE.md with latest pipeline status..."
    
    local temp_file
    temp_file=$(mktemp)
    
    # Add workflow status section to ARCHITECTURE.md
    {
        echo ""
        echo "## Current Pipeline Status"
        echo ""
        echo "| Component | Status | Last Updated |"
        echo "|-----------|--------|--------------|"
        
        for workflow in "CI" "E2E Tests" "Security Scan" "Build"; do
            local status
            status=$(check_workflow_status "${workflow}" || echo "unknown")
            local status_icon
            case "${status}" in
                "completed") status_icon="✅" ;;
                "in_progress") status_icon="🟡" ;;
                "queued") status_icon="⏳" ;;
                "failure") status_icon="❌" ;;
                *) status_icon="❓" ;;
            esac
            echo "| ${workflow} | ${status_icon} ${status} | $(date '+%Y-%m-%d %H:%M UTC') |"
        done
        
        echo ""
        echo "_Auto-generated by watch-workflows.sh_"
        echo ""
    } >> "${temp_file}"
    
    # Insert status section into ARCHITECTURE.md (after first heading)
    if [[ -f "${DOCS_DIR}/ARCHITECTURE.md" ]]; then
        local arch_temp
        arch_temp=$(mktemp)
        
        # Copy everything up to first section after main header
        awk '/^## /{if(first_section){print; exit} first_section=1} 1' "${DOCS_DIR}/ARCHITECTURE.md" > "${arch_temp}"
        
        # Add our status section
        cat "${temp_file}" >> "${arch_temp}"
        
        # Add rest of original file (skip first section we already included)
        awk '/^## /{if(first_section && seen_first){print; next} if(first_section){seen_first=1; next} first_section=1} first_section && seen_first' "${DOCS_DIR}/ARCHITECTURE.md" >> "${arch_temp}"
        
        mv "${arch_temp}" "${DOCS_DIR}/ARCHITECTURE.md"
        log "Updated ARCHITECTURE.md with workflow status"
    fi
    
    rm -f "${temp_file}"
}

update_operations_docs() {
    log "Updating OPERATIONS.md with latest demo status..."
    
    # Check if demo artifacts exist and are recent
    local demo_status="❓ Unknown"
    if [[ -f "${ARTIFACTS_DIR}/demo_results.json" ]]; then
        local age_minutes
        age_minutes=$(( ($(date +%s) - $(stat -f%m "${ARTIFACTS_DIR}/demo_results.json" 2>/dev/null || stat -c%Y "${ARTIFACTS_DIR}/demo_results.json" 2>/dev/null || echo 0)) / 60 ))
        
        if [[ ${age_minutes} -lt 60 ]]; then
            demo_status="✅ Working (tested ${age_minutes}m ago)"
        elif [[ ${age_minutes} -lt 1440 ]]; then  # 24 hours
            demo_status="🟡 Stale (tested ${age_minutes}m ago)"
        else
            demo_status="❌ Outdated (tested >24h ago)"
        fi
    fi
    
    # Update OPERATIONS.md with demo status
    local temp_file
    temp_file=$(mktemp)
    
    {
        echo ""
        echo "## Live Demo Status"
        echo ""
        echo "**Current Status:** ${demo_status}"
        echo ""
        echo "**Last Verified:** $(date '+%Y-%m-%d %H:%M UTC')"
        echo ""
        echo "**Quick Health Check:**"
        echo "\`\`\`bash"
        echo "make check-prereqs  # Should show all ✓"
        echo "make demo-full      # Full pipeline test"
        echo "\`\`\`"
        echo ""
        echo "_Auto-updated by workflow monitoring_"
        echo ""
    } >> "${temp_file}"
    
    # Similar logic to update OPERATIONS.md
    if [[ -f "${DOCS_DIR}/OPERATIONS.md" ]]; then
        local ops_temp
        ops_temp=$(mktemp)
        
        # Insert after main header, before first ## section
        awk '/^# /{print; getline; print; while(getline && !/^## /){print}; if(/^## /){print} }' "${DOCS_DIR}/OPERATIONS.md" > "${ops_temp}"
        cat "${temp_file}" >> "${ops_temp}"
        awk 'BEGIN{skip=1} /^## /{skip=0} !skip' "${DOCS_DIR}/OPERATIONS.md" >> "${ops_temp}"
        
        mv "${ops_temp}" "${DOCS_DIR}/OPERATIONS.md"
        log "Updated OPERATIONS.md with demo status"
    fi
    
    rm -f "${temp_file}"
}

update_references_docs() {
    log "Updating REFERENCES.md with latest standards status..."
    
    # Check for any broken links (simplified check)
    local temp_file
    temp_file=$(mktemp)
    
    {
        echo ""
        echo "## Links Status"
        echo ""
        echo "_Last verified: $(date '+%Y-%m-%d %H:%M UTC')_"
        echo ""
        echo "Use \`make verify-links\` to check all external references."
        echo ""
    } >> "${temp_file}"
    
    # Append to REFERENCES.md
    if [[ -f "${DOCS_DIR}/REFERENCES.md" ]]; then
        echo "" >> "${DOCS_DIR}/REFERENCES.md"
        cat "${temp_file}" >> "${DOCS_DIR}/REFERENCES.md"
        log "Updated REFERENCES.md with links status"
    fi
    
    rm -f "${temp_file}"
}

commit_doc_updates() {
    local changes_made=false
    
    # Check if any docs changed
    if git diff --quiet HEAD -- "${DOCS_DIR}/" >/dev/null 2>&1; then
        log "No documentation changes detected"
        return 0
    fi
    
    changes_made=true
    
    # Create or switch to doc update branch
    if ! git show-ref --verify --quiet "refs/heads/${DOC_UPDATE_BRANCH}"; then
        git checkout -b "${DOC_UPDATE_BRANCH}"
        log "Created new branch: ${DOC_UPDATE_BRANCH}"
    else
        git checkout "${DOC_UPDATE_BRANCH}"
        git pull origin main --rebase || true
        log "Switched to branch: ${DOC_UPDATE_BRANCH}"
    fi
    
    # Stage and commit doc changes
    git add "${DOCS_DIR}/"
    
    local commit_msg
    commit_msg="docs: auto-update from workflow status

- Updated ARCHITECTURE.md with pipeline status
- Updated OPERATIONS.md with demo status  
- Updated REFERENCES.md with link verification

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    git commit -m "${commit_msg}"
    log "Committed documentation updates"
    
    # Push to remote (optional - uncomment if desired)
    # git push origin "${DOC_UPDATE_BRANCH}"
    # log "Pushed to remote branch: ${DOC_UPDATE_BRANCH}"
    
    git checkout main
}

main() {
    log "Starting workflow monitoring for doc updates..."
    log "Repository: ${REPO_ROOT}"
    log "Check interval: ${WORKFLOW_CHECK_INTERVAL}s"
    
    # Ensure we're in a git repo
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        log "ERROR: Not in a git repository"
        exit 1
    fi
    
    # Create artifacts directory if needed
    mkdir -p "${ARTIFACTS_DIR}"
    
    local last_update=0
    local update_frequency=1800  # Update docs every 30 minutes max
    
    while true; do
        local current_time
        current_time=$(date +%s)
        
        # Check if enough time has passed for an update
        if (( current_time - last_update >= update_frequency )); then
            log "Checking workflow status and updating docs..."
            
            # Check each workflow and update docs accordingly
            local ci_status
            ci_status=$(check_workflow_status "CI" || echo "unknown")
            
            if [[ "${ci_status}" == "completed" ]]; then
                log "CI workflow is GREEN - updating documentation"
                update_architecture_docs
                update_operations_docs
                update_references_docs
                commit_doc_updates
                last_update=${current_time}
            else
                log "CI workflow status: ${ci_status} - skipping doc update"
            fi
        fi
        
        log "Waiting ${WORKFLOW_CHECK_INTERVAL}s until next check..."
        sleep ${WORKFLOW_CHECK_INTERVAL}
    done
}

# Handle signals for clean shutdown
trap 'log "Shutting down workflow monitor..."; exit 0' SIGINT SIGTERM

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi